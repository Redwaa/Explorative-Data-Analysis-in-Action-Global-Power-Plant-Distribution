Traceback (most recent call last):
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Lenov\miniconda3\envs\geo_env_fupy\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
if 'longitude' in gdf_germany.columns and 'latitude' in gdf_germany.columns and 'primary_fuel' in gdf_germany.columns:
    from shapely.geometry import Point

    # Create geometry column for GeoDataFrame
    geometry = [Point(xy) for xy in zip(gdf_germany['longitude'], gdf_germany['latitude'])]
    gdf_germany = gpd.GeoDataFrame(gdf_germany, geometry=geometry, crs="EPSG:4326")

    # Create base map
    base = cuteplot(gdf_germany, map_extent=(5, 16, 47, 55), draw_water=True)

    # Plot power plants using scatter
    for fuel in gdf_germany['primary_fuel'].unique():
        mask = gdf_germany['primary_fuel'] == fuel
        plt.scatter(
            gdf_germany[mask].geometry.x,
            gdf_germany[mask].geometry.y,
            c=colors.get(fuel, 'grey'),  # Default to grey if fuel not in colors
            s=20,
            alpha=0.5,
            label=fuel
        )

    plt.title('Power Plants in Germany by Fuel Type')
    plt.legend()
    plt.show()
else:
    print("Required columns ('longitude', 'latitude', or 'primary_fuel') not found in gdf_germany.")



------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[8], line 17[0m
[0;32m     12[0m [38;5;28;01mfor[39;00m fuel [38;5;129;01min[39;00m gdf_germany[[38;5;124m'[39m[38;5;124mprimary_fuel[39m[38;5;124m'[39m][38;5;241m.[39munique():
[0;32m     13[0m     mask [38;5;241m=[39m gdf_germany[[38;5;124m'[39m[38;5;124mprimary_fuel[39m[38;5;124m'[39m] [38;5;241m==[39m fuel
[0;32m     14[0m     plt[38;5;241m.[39mscatter(
[0;32m     15[0m         gdf_germany[mask][38;5;241m.[39mgeometry[38;5;241m.[39mx,
[0;32m     16[0m         gdf_germany[mask][38;5;241m.[39mgeometry[38;5;241m.[39my,
[1;32m---> 17[0m         c[38;5;241m=[39m[43mcolors[49m[38;5;241m.[39mget(fuel, [38;5;124m'[39m[38;5;124mgrey[39m[38;5;124m'[39m),  [38;5;66;03m# Default to grey if fuel not in colors[39;00m
[0;32m     18[0m         s[38;5;241m=[39m[38;5;241m20[39m,
[0;32m     19[0m         alpha[38;5;241m=[39m[38;5;241m0.5[39m,
[0;32m     20[0m         label[38;5;241m=[39mfuel
[0;32m     21[0m     )
[0;32m     23[0m plt[38;5;241m.[39mtitle([38;5;124m'[39m[38;5;124mPower Plants in Germany by Fuel Type[39m[38;5;124m'[39m)
[0;32m     24[0m plt[38;5;241m.[39mlegend()

[1;31mNameError[0m: name 'colors' is not defined

